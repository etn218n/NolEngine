#define vertex
#version 330 core

layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 TexCoord;

out vertex
{
	vec3 Normal;
	vec2 TexCoord;
	vec3 FragmentPosition;
} Vertex;

uniform mat4 uModel;
uniform mat4 uViewProjection;

void main()
{
	gl_Position     = uViewProjection * uModel * vec4(Position, 1.0);
	Vertex.TexCoord = TexCoord;
	Vertex.Normal   = normalize(mat3(transpose(inverse(uModel))) * Normal);  

	Vertex.FragmentPosition = vec3(uModel* vec4(Position, 1.0f));
}

/*-----------------------------------------------------------------------------------*/
#define fragment
#version 330 core

struct Material 
{
    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;
    float Shininess;
}; 
  
struct Light 
{
	int Type;
    vec3 Position;
	vec3 Direction;
    vec3 Color;

	float Cutoff;
	float OuterCutoff;
	float Constant;
    float Linear;
    float Quadratic;
};

in vertex
{
	vec3 Normal;
	vec2 TexCoord;
	vec3 FragmentPosition;
} Vertex;

out vec4 FragColor;

uniform Light[100] uLight;
uniform int uNumberofLights;
uniform Material uMaterial;
uniform sampler2D uTexture0;
uniform vec3 uCameraPosition;

vec3 DirectionalLighting(Light light);
vec3 SpotLighting(Light light);
vec3 PointLighting(Light light);

void main()
{
	vec3 result = vec3(0.0f, 0.0f, 0.0f);

	for (int i = 0; i < uNumberofLights; i++)
	{
		if (uLight[i].Type == 0) // Directional Light
			result += DirectionalLighting(uLight[i]);
		else if(uLight[i].Type == 1) // Point Light
			result += PointLighting(uLight[i]);
		else if(uLight[i].Type == 2) // Spot Light
			result += SpotLighting(uLight[i]);
	}

	FragColor = vec4(result, 1.0f) * texture(uTexture0, Vertex.TexCoord);
}

vec3 DirectionalLighting(Light light)
{
	vec3 lightDirection = normalize(-light.Direction);  
	float diffuseIntensity = max(dot(Vertex.Normal, lightDirection), 0);

	vec3 reflectDirection = reflect(-lightDirection, Vertex.Normal);
	float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - Vertex.FragmentPosition)), 0), uMaterial.Shininess);

	vec3 ambient  = light.Color * uMaterial.Ambient;
	vec3 diffuse  = light.Color * uMaterial.Diffuse  * diffuseIntensity;
	vec3 specular = light.Color * uMaterial.Specular * specularIntensity;
	
	return (ambient + specular + diffuse);
}

vec3 PointLighting(Light light)
{
	vec3 lightDirection = normalize(light.Position - Vertex.FragmentPosition);  
	float diffuseIntensity = max(dot(Vertex.Normal, lightDirection), 0) + 0.1f;

	vec3 reflectDirection = reflect(-lightDirection, Vertex.Normal);
	float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - Vertex.FragmentPosition)), 0), uMaterial.Shininess);

	float distance    = length(light.Position - Vertex.FragmentPosition);
	float attenuation = 1.0 / (light.Constant + light.Linear * distance + light.Quadratic * (distance * distance));    

	vec3 ambient  = light.Color * uMaterial.Ambient;
	vec3 diffuse  = light.Color * uMaterial.Diffuse  * diffuseIntensity;
	vec3 specular = light.Color * uMaterial.Specular * specularIntensity;

	return (ambient + specular + diffuse) * attenuation;
}

vec3 SpotLighting(Light light)
{
	vec3 lightDirection = normalize(light.Position - Vertex.FragmentPosition);  
	float diffuseIntensity = max(dot(Vertex.Normal, lightDirection), 0) + 0.1f;

	vec3 reflectDirection = reflect(-lightDirection, Vertex.Normal);
	float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - Vertex.FragmentPosition)), 0), uMaterial.Shininess);

	float distance    = length(light.Position - Vertex.FragmentPosition);
	float attenuation = 1.0 / (light.Constant + light.Linear * distance + light.Quadratic * (distance * distance));    

	vec3 ambient  = light.Color * uMaterial.Ambient;
	vec3 diffuse  = light.Color * uMaterial.Diffuse  * diffuseIntensity;
	vec3 specular = light.Color * uMaterial.Specular * specularIntensity;
		
	float theta     = dot(lightDirection, normalize(-light.Direction)); 
	float epsilon   = (light.Cutoff - light.OuterCutoff);
	float intensity = clamp((theta - light.OuterCutoff) / epsilon, 0.0, 1.0);

	diffuse  *= intensity;
	specular *= intensity;

	return (ambient + specular + diffuse) * attenuation;
}

