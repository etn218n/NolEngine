#define vertex
#version 330 core

layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 TexCoord;

out vec3 VertexNormal;
out vec2 VertexTexCoord;
out vec3 FragmentPosition;

uniform mat4 uModel;
uniform mat4 uViewProjection;

void main()
{
	gl_Position    = uViewProjection * uModel * vec4(Position, 1.0);
	VertexTexCoord = TexCoord;
	VertexNormal   = mat3(transpose(inverse(uModel))) * Normal;  

	FragmentPosition = vec3(uModel* vec4(Position, 1.0f));
}

#define fragment
#version 330 core

struct Material 
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
struct Light 
{
	int type;
    vec3 position;
	vec3 direction;
    vec3 color;

	float cutoff;
	float outercutoff;
	float constant;
    float linear;
    float quadratic;
};

in vec3 VertexNormal;
in vec2 VertexTexCoord;
in vec3 FragmentPosition;

out vec4 FragColor;

uniform Light uLight;
uniform Material uMaterial;
uniform sampler2D uTexture0;
uniform vec3 uCameraPosition;

void main()
{
	vec3 normalVector = normalize(VertexNormal);

	if (uLight.type == 0) // Directional Light
	{
		vec3 lightDirection = normalize(-uLight.direction);  
		float diffuseIntensity = max(dot(normalVector, lightDirection), 0) + 0.1f;

		vec3 reflectDirection = reflect(-lightDirection, normalVector);
		float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - FragmentPosition)), 0), uMaterial.shininess);

		vec3 ambient  = uLight.color * uMaterial.ambient;
		vec3 diffuse  = uLight.color * uMaterial.diffuse  * diffuseIntensity;
		vec3 specular = uLight.color * uMaterial.specular * specularIntensity;
	
		FragColor = vec4((ambient + specular + diffuse), 1.0f) * texture(uTexture0, VertexTexCoord);
	}
	else if (uLight.type == 1) // Point Light
	{
		vec3 lightDirection = normalize(uLight.position - FragmentPosition);  
		float diffuseIntensity = max(dot(normalVector, lightDirection), 0) + 0.1f;

		vec3 reflectDirection = reflect(-lightDirection, normalVector);
		float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - FragmentPosition)), 0), uMaterial.shininess);

		float distance    = length(uLight.position - FragmentPosition);
		float attenuation = 1.0 / (uLight.constant + uLight.linear * distance + uLight.quadratic * (distance * distance));    

		vec3 ambient  = uLight.color * uMaterial.ambient;
		vec3 diffuse  = uLight.color * uMaterial.diffuse  * diffuseIntensity;
		vec3 specular = uLight.color * uMaterial.specular * specularIntensity;
	
		FragColor = vec4((ambient + specular + diffuse) * attenuation, 1.0f) * texture(uTexture0, VertexTexCoord);
	}
	else if (uLight.type == 2) // Spot Light
	{
		vec3 lightDirection = normalize(uLight.position - FragmentPosition);  
		float diffuseIntensity = max(dot(normalVector, lightDirection), 0) + 0.1f;

		vec3 reflectDirection = reflect(-lightDirection, normalVector);
		float specularIntensity = pow(max(dot(reflectDirection, normalize(uCameraPosition - FragmentPosition)), 0), uMaterial.shininess);

		float distance    = length(uLight.position - FragmentPosition);
		float attenuation = 1.0 / (uLight.constant + uLight.linear * distance + uLight.quadratic * (distance * distance));    

		vec3 ambient  = uLight.color * uMaterial.ambient;
		vec3 diffuse  = uLight.color * uMaterial.diffuse  * diffuseIntensity;
		vec3 specular = uLight.color * uMaterial.specular * specularIntensity;
		
		float theta = dot(lightDirection, normalize(-uLight.direction)); 
		float epsilon = (uLight.cutoff - uLight.outercutoff);
		float intensity = clamp((theta - uLight.outercutoff) / epsilon, 0.0, 1.0);
		diffuse  *= intensity;
		specular *= intensity;

		FragColor = vec4((ambient + specular + diffuse) * attenuation, 1.0f) * texture(uTexture0, VertexTexCoord);
	}	
}