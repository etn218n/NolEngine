#define vertex
#version 330 core

layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 TexCoord;

out vec3 VertexNormal;
out vec2 VertexTexCoord;
out vec3 FragmentPosition;

uniform mat4 uModel;
uniform mat4 uViewProjection;

void main()
{
	gl_Position    = uViewProjection * uModel * vec4(Position, 1.0);
	VertexTexCoord = TexCoord;
	VertexNormal   = mat3(transpose(inverse(uModel))) * Normal;  

	FragmentPosition = vec3(uModel* vec4(Position, 1.0f));
}

#define fragment
#version 330 core

in vec3 VertexNormal;
in vec2 VertexTexCoord;
in vec3 FragmentPosition;

out vec4 FragColor;

uniform vec4 uLightColor;
uniform vec3 uLightPosition;
uniform sampler2D uTexture0;

void main()
{
	vec3 normal = normalize(VertexNormal);
	vec3 lightDirection = normalize(uLightPosition - FragmentPosition);  

	float diffuseStrength = max(dot(normal, lightDirection), 0) + 0.1f;

	FragColor =  diffuseStrength * texture(uTexture0, VertexTexCoord) * uLightColor;
}